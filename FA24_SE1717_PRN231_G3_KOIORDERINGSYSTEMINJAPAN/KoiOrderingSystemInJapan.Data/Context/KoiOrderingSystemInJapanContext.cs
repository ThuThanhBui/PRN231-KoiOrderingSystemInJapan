// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using KoiOrderingSystemInJapan.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KoiOrderingSystemInJapan.Data.Context;

public partial class KoiOrderingSystemInJapanContext : DbContext
{
    public KoiOrderingSystemInJapanContext()
    {
    }

    public KoiOrderingSystemInJapanContext(DbContextOptions<KoiOrderingSystemInJapanContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<CustomerService> CustomerServices { get; set; }

    public virtual DbSet<Delivery> Deliveries { get; set; }

    public virtual DbSet<DeliveryDetail> DeliveryDetails { get; set; }

    public virtual DbSet<Farm> Farms { get; set; }

    public virtual DbSet<FarmCategory> FarmCategories { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<KoiFish> KoiFishes { get; set; }

    public virtual DbSet<KoiOrder> KoiOrders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceOrder> ServiceOrders { get; set; }

    public virtual DbSet<Size> Sizes { get; set; }

    public virtual DbSet<Travel> Travels { get; set; }

    public virtual DbSet<TravelFarm> TravelFarms { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
    .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Category");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
        });

        modelBuilder.Entity<ServiceXCustomerService>(entity =>
        {
            entity.HasKey(e => new { e.ServiceId, e.CustomerServiceId });
            entity.ToTable("ServiceXCustomerService");
        });

        modelBuilder.Entity<CustomerService>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("CustomerService");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerServices)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Travel).WithMany(p => p.CustomerServices)
                .HasForeignKey(d => d.TravelId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasMany(e => e.ServiceXCustomerService)
                .WithOne(e => e.CustomerService)
                .HasForeignKey(e => e.CustomerServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Delivery>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Delivery");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.DeliveryStaff).WithMany(p => p.Deliveries)
                .HasForeignKey(d => d.DeliveryStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.KoiOrder).WithMany(p => p.Deliveries)
                .HasForeignKey(d => d.KoiOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<DeliveryDetail>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("DeliveryDetail");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");

            entity.HasOne(d => d.Delivery).WithMany(p => p.DeliveryDetails)
                .HasForeignKey(d => d.DeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Farm>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Farm");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
        });

        modelBuilder.Entity<FarmCategory>(entity =>
        {
            entity.HasKey(e => new { e.FarmId, e.CategoryId });

            entity.ToTable("FarmCategory");

            entity.HasOne(d => d.Category).WithMany(p => p.FarmCategories)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Farm).WithMany(p => p.FarmCategories)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Invoice");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<KoiFish>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("KoiFish");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Category).WithMany(p => p.KoiFishes)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Size).WithMany(p => p.KoiFishes)
                .HasForeignKey(d => d.SizeId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<KoiOrder>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("KoiOrder");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Customer).WithMany(p => p.KoiOrders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Invoice).WithOne(p => p.KoiOrder)
                .HasForeignKey<KoiOrder>(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("OrderDetail");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.KoiFish).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.KoiFishId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.KoiOrder).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.KoiOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.CustomerService).WithMany(p => p.Sales)
                .HasForeignKey(d => d.CustomerServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ResponseByNavigation).WithMany(p => p.SaleResponseByNavigations)
                .HasForeignKey(d => d.ResponseBy)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.SaleStaff).WithMany(p => p.SaleSaleStaffs)
                .HasForeignKey(d => d.SaleStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Service");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasMany(e => e.ServiceXCustomerService)
                .WithOne(e => e.Service)
                .HasForeignKey(e => e.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ServiceOrder>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("ServiceOrder");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.CustomerService).WithMany(p => p.ServiceOrders)
                .HasForeignKey(d => d.CustomerServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Invoice).WithOne(p => p.ServiceOrder)
                .HasForeignKey<ServiceOrder>(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Size>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Size");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.SizeInCm).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<Travel>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Travel");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TravelFarm>(entity =>
        {
            entity.HasKey(e => new { e.TravelId, e.FarmId });

            entity.ToTable("TravelFarm");

            entity.HasOne(d => d.Farm).WithMany(p => p.TravelFarms)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Travel).WithMany(p => p.TravelFarms)
                .HasForeignKey(d => d.TravelId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("User");

            entity.Property(e => e.Id).ValueGeneratedOnAdd().HasDefaultValueSql("NEWId()");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}